#root-content

  #errors
    #error-template.hidden
      li
        b.error

  button#add-tone-generator add tone generator
  #tone-generators

  #tone-generator-html.hidden
    .bordered.tone-generator-row
      button.start start tone generator
      button.stop.hidden stop tone generator
      br
      input.freq-slider type='range' min='0' max='500'
      i pitch
      br
      input.gain-slider type='range' min='0' max='300' step='0.125'
      i gain
      br
      button.remove X
  
coffee:

  $errors = $root_content.find("#errors")
  error_template = $errors.find("#error-template")[0].innerHTML
  helpers.add_error = (msg) ->
    $err = $ error_template
    $err.find(".error").text msg
    $errors.append($err)
    setTimeout ->
      $err.remove()
    , 3000

  # --------------------------------------------------
  # Tone generator
  # --------------------------------------------------
  
  (->

    # HTML for a tone generator row
    tone_generator_html = $root_content.find("#tone-generator-html")[0].innerHTML

    # Button to add a tone generator row
    $add_tone_generator = $root_content.find("#add-tone-generator")
    $tone_generators = $root_content.find("#tone-generators")

    # Can't have more than 6 live audio contexts, so need to keep track of that
    state.audio_context_count = 0

    # the default values of a new audio context
    default_tone =
      oscillator: { freq: 200, type: "sine" }
      gain: { value: 1 }

    # Each row has handlers invoked in its own context (via the IEFE)
    $add_tone_generator.on "click", (e) -> (->
      if state.audio_context_count > 5
        helpers.add_error "can't create more than 6 audio contexts."
        return false
      state.audio_context_count += 1 

      # Add the HTML to DOM
      @$row = $ tone_generator_html
      $tone_generators.append @$row

      # Find controls of row
      $start_btn = @$row.find(".start")
      $stop_btn = @$row.find(".stop")
      $freq_slider = @$row.find(".freq-slider")
      $remove_btn = @$row.find(".remove")
      $gain_slider = @$row.find(".gain-slider")

      # gain slider
      $gain_slider.on "input", (e) =>
        val = parseFloat($gain_slider.val())
        @tone_generator.update gain: { val }

      # Start button for row
      $start_btn.on 'click', (e) =>
        $start_btn.addClass "hidden"
        $stop_btn.removeClass "hidden"
        @tone_generator ||= new ToneGenerator()
        @tone_generator.playing = false
        @tone_generator.update default_tone
        @tone_generator.start()
        @tone_generator.playing = true

      # Stop button for row
      $stop_btn.on 'click', (e) =>
        $stop_btn.addClass "hidden"
        $start_btn.removeClass "hidden"  
        @tone_generator.stop()
        @tone_generator.close()
        @tone_generator.playing = false

      # Frequency slider for row
      $freq_slider.on 'input', (e) =>
        freq = ~~$freq_slider.val()
        @tone_generator.update oscillator: { freq }

      # Remove button for row
      $remove_btn.on 'click', (e) =>
        if @tone_generator
          @tone_generator.stop() if @tone_generator.playing
          @tone_generator.close()
        @$row.remove()
        state.audio_context_count -= 1

    ).apply {} # per-row click event

  )() # tone generator
    