#grid-content.hidden
  
  label for='default-length' default row length: 
  input{
    type='number'
    id='default-row-length'
    name='default-length'
    min='1'
    max='32'
    step='1'
    value='4'
  }
  br
  label for='bpm' bpm:
  input{
    type='number'
    id='bpm'
    name='bpm'
    min='1'
    max='500'
    step='1'
    value='120'
  }
  br
  label for='division' division:
  select id='division' name='division'
    option value='1' whole notes
    option value='2' half notes
    option value='3' quarter note triplets
    option selected='selected' value='4' quarter notes
    option value='6' eighth note triplets
    option value='8' eighth notes
    option value='12' sixteenth note triplets
    option value='16' sixteenth notes 
  br
  button#play-grid play
  br
  button#add-row add row
  br

  #grid-cell-modal.hidden
    select#grid-cell-options

  #rows

coffee:

  $grid_content = $ "#grid-content"
  $add_row = $grid_content.find "#add-row"
  $play_grid = $grid_content.find "#play-grid"
  $rows = $grid_content.find "#rows"
  $bpm = $grid_content.find "#bpm"
  $division = $grid_content.find "#division"
  $default_row_length = $grid_content.find "#default-row-length"

  build_col = (row_idx, col_idx) ->
    $ """
      <li data-row-idx='#{row_idx}' data-idx='#{col_idx}' class='col'>
        <span class='col-text'></span>
        <section class='hidden grid-cell-audio'>
        </section>
      </li>
    """

  show_modal = ($col) ->
    $opts = $("#audio-selector").clone()
    $grid_cell_audio = $col.find(".grid-cell-audio")
    $modal = $ """
      <div class='col-opts-modal'>
      </div>
    """
    $.each $opts.find("option:selected"), (idx, node) ->
      node.removeAttribute "selected"
    $opts.prepend $ """
      <option disabled selected value> -- select an option -- </option>
    """
    $
    $modal.append $opts
    $opts.on "change", ->
      $selected = $opts.find("option:selected")
      filename = $selected.val()
      common_name = $selected.text()
      row_idx = ~~$col.data("row-idx")
      col_idx = ~~$col.data("idx")
      state.grid_matrix[row_idx] ||= []
      row = state.grid_matrix[row_idx]
      row[col_idx] = { cmd: "note", filename }
      $col.addClass("has-content")
      $col.attr("title", common_name)
      $audio = $(".audio[data-filename='#{filename}'] audio").clone()
      $audio.addClass("hidden")
      $grid_cell_audio.empty().append $audio
      $modal.remove()
    $modal

  add_col_events = ($col, row_idx, col_idx) ->
    $text = $col.find(".col-text")
    $col.on "click", ->
      if $col.hasClass("has-content")
        $col.attr("title", "")
        $col.text ""
        $col.removeClass("has-content")
        state.grid_matrix[row_idx][col_idx] = null
        $col.find(".grid-cell-audio").empty()
      else
        return if $col.find(".col-opts-modal").length > 0
        $open_modal = show_modal($col)
        $col.prepend $open_modal
    $col.on "mouseenter", ->
      if $col.hasClass("has-content")
        $text.text "x"
      true
    $col.on "mouseleave", ->
      $text.text ""
      true

  set_num_cols = (row_idx, num_cols, $rows, $row_wrapper, $ul) ->
    state.grid_matrix[row_idx] = ((array) ->
      [0...num_cols].forEach -> array.push {cmd: "rest"}
      array
    )([])
    [0...num_cols].forEach (col_idx) ->
      $col = build_col(row_idx, col_idx)
      $ul.append $col
      add_col_events($col, row_idx, col_idx)
    $rows.append $row_wrapper

  build_row = (idx) ->
    $ """
      <div class='row-wrapper'>
        <ul class='row' data-idx='#{idx}' ></ul>
          <button class='remove-row'>X</button>
          <label for='num-cols'> beats: </label>
          <input
            type='number'
            name='num-cols'
            class='num-cols'
          ></input>
        </div>
      </div>
    """

  grid_state =
    col: 0
    audios: {}
    stopping: false

  play_next_note = (idx) ->
    state.grid_matrix.forEach (row) ->
      col = row[grid_state.col]
      if col
        switch col.cmd
          when "rest"
            null
          when "note"
            aud = grid_state.audios[col.filename]
            aud.play()
      else
        grid_state.col = -1
    grid_state.col += 1

  grid_tick = (ticks_gap, idx) ->
    ->
      play_next_note(idx) if [ticks_gap, 0].includes(idx)
      idx += 1
      (idx = 1) if idx > (ticks_gap + 1)
      if grid_state.stopping
        Object.assign grid_state,
          stopping: false
          row: 0
          col: 0
      else
        requestAnimationFrame grid_tick(ticks_gap, idx)

  play_grid = ->
    return true if state.grid_matrix.length < 1
    bpm = parseFloat($bpm.val())
    console.log bpm, "bpm"
    division = parseFloat($division.find("option:selected").val() || 120)
    console.log division, "division"
    seconds_gap = (15.0 / 1.0) / (bpm / division)
    console.log seconds_gap, "seconds gap"
    ticks_gap = seconds_gap * 60.0
    console.log ticks_gap, "ticks gap"
    $audios = $(".audio audio")
    $.each $audios, (idx, audio) ->
      audio_clone = $(audio).clone()[0]
      grid_state.audios[$(audio).data("filename")] = audio_clone
      audio_clone.loop = false
    requestAnimationFrame(grid_tick ticks_gap, 0)

    # $($($(".row")[0]).find(".col")[0]).find(".grid-cell-audio audio")[0].pause()

  stop_grid = ->
    grid_state.stopping = true

  $add_row.on "click", ->
    $row_wrapper = build_row(state.last_row_idx += 1)
    $rows.append $row_wrapper
    $ul = $row_wrapper.find "ul"
    $num_cols = $row_wrapper.find ".num-cols"
    $remove_row = $row_wrapper.find ".remove-row"

    num_cols = ~~$default_row_length.val()
    set_num_cols(state.last_row_idx, num_cols, $rows, $row_wrapper, $ul)

    $num_cols.val(num_cols)
    $remove_row.on "click", ->
      $row_wrapper.remove()

    $num_cols.on "input", ->
      num_cols = ~~$num_cols.val()
      $ul.empty()
      set_num_cols state.last_row_idx, num_cols, $rows, $row_wrapper, $ul

  $play_grid.on "click", ->
    if $play_grid.data("state") == "playing"
      $play_grid.text "play"
      $play_grid.data("state", "stopped")
      stop_grid()
    else
      $play_grid.text "stop"
      $play_grid.data("state", "playing")
      play_grid()
